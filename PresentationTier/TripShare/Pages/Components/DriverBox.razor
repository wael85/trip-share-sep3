@namespace TripShare.Pages.Components
@using HttpClient.ClientImplementation
@using Domain.Model
@using HttpClient.ClientInterfaces
@using Microsoft
@inject ICarClient client;

<div class="row">
    <div class="form-check form-switch">

        <label class="form-label" for="flexSwitchCheckDefault">Do you want to be a Driver?</label>
        <input class="form-check-input" style="float: right" type="checkbox" @bind-value="status" 
               @onclick="@(async (rgs) => 
                         { DriveLicense = ""; PlateNumber = ""; msg = ""; infoCar = null; await ButtonStatus("hidden"); })" id="flexSwitchCheckDefault">

    </div>
</div>
@if (status)
{
    <div class="row" @onmouseover="(e) => { CarTypeChanged(CarType); ModelChanged(Model);}">
        <div class="col-md-6 mb-4 d-flex align-items-center">

            <div class="form-outline datepicker w-100">
                <label class="form-label">DriverLicense Nu. :</label>
                <input type="text" @bind="DriveLicense" @bind:event="oninput" @onchange="(e)=>DriveLicenseChanged(e)" class="form-control form-control-lg"/>

            </div>

        </div>
        <div class="col-md-6 mb-4 pb-2">

            <div class="form-outline">
                <label class="form-label">Plate Number :</label>

                <input type="text" @bind="PlateNumber" @bind:event="oninput" @onchange="(e)=>PlateNumberChanged(e)" class="form-control form-control-lg"/>

            </div>
        </div>
    </div>

    <div class="mt-2 pt-2">
        <input class="btn btn-primary btn-lg" @onclick="CheckCar" type="button" value="Verify My Car"/>
    </div>

@if (!String.IsNullOrEmpty(PlateNumber) && infoCar != null)
{
    <div class="row" @onmouseover="(e) => { CarTypeChanged(CarType); ModelChanged(Model);ColorChanged(Color);SeatsChanged(Seats);}">

            <div class="form-outline  col-md-4 mb-4">
                <label class="form-label">Color</label>
                <input type="text" @bind="Color"  @bind:event="oninput" @onchange="(e)=>ColorChanged(Color)"   class="form-control form-control-lg"/>
            </div>
        <div class="form-outline col-md-4 mb-4 pb-2">
            <label class="form-label">Fuel Type</label>
            <input type="text" disabled="@(infoCar != null && !String.IsNullOrEmpty(infoCar.FuelType))"
                   @bind="CarType"@bind:event="oninput" @onchange="((e) =>CarTypeChanged (CarType))" class="form-control form-control-lg"/>
        </div>
        <div class="col-md-3 mb-4 pb-2">
            <label class="form-label">Seats count </label>
            <input type="number" min="2" max="7" disabled="@(infoCar is {SeatsCount: > 0 })" 
                   @bind:event="oninput" @onchange="(e)=>SeatsChanged(Seats)" @bind="Seats"/>
        </div>
    </div>
    <div class="row">
         <div class="form-outline">
             <label class="form-label">Model</label>
             <input type="text" disabled="@(infoCar != null && !String.IsNullOrEmpty(infoCar.CarModel))" @bind="Model"
                    @bind:event="oninput" @onchange="((e) => ModelChanged(Model))" class="form-control"/>
         </div>
    </div>
}
    <div>
        @if (!String.IsNullOrEmpty(msg))
        {
            <p style="color: red">@msg</p>
        }
    </div>
    
}


@code {
    private bool status = false;

    [Parameter]
    public EventCallback<string> OnDriveLicenseChange { get; set; }
    [Parameter]
    public EventCallback<string> OnPlateNumberChange { get; set; }
    [Parameter]
    public EventCallback<string> OnColorChange { get; set; }
    [Parameter]
    public EventCallback<string> OnModelChange { get; set; }
    [Parameter]
    public EventCallback<string> OnCarTypeChange { get; set; }
    [Parameter]
    public EventCallback<int> OnSeatsChange { get; set; }
    [Parameter]
    public EventCallback<string> OnButtonStatusChange { get; set; }
    
    public string DriveLicense { get; set; }

    
    public string PlateNumber { get; set; }
    
    public string Color { get; set; }
    
    public string Model { get; set; }

    
    public string CarType { get; set; }
    
    public int Seats { get; set; }

    public string msg = "";

    private Car? infoCar;


    private async Task CheckCar()
    {
        msg = "";
        
        if (!String.IsNullOrEmpty(PlateNumber))
        {
            try
            {
                Car car = await client.Verify(PlateNumber);
                Color = car.Color;
                Model = car.CarModel;
                CarType = car.FuelType;
                Seats = car.SeatsCount ?? 0;
                infoCar = car;
            }
            catch (Exception e)
            {
                msg = e.Message;
            }
            
        }
        else
        {
            msg = "We need your drive License number and plate number to submit your request.";
        }
       

    }

    protected async Task DriveLicenseChanged(ChangeEventArgs e)
    {
        await OnDriveLicenseChange.InvokeAsync((string?)e.Value);
    }
    protected async Task ColorChanged(string color)
    {
        await OnColorChange.InvokeAsync(color);
    }
    protected async Task PlateNumberChanged(ChangeEventArgs e)
    {
        await OnPlateNumberChange.InvokeAsync((string?)e.Value);
    }
    protected async Task CarTypeChanged(string fuel)
    {
        await OnCarTypeChange.InvokeAsync(fuel);
    }
    protected async Task ModelChanged(string model)
    {
        await OnModelChange.InvokeAsync(model);
    }
    protected async Task SeatsChanged(int i)
    {
     
        await OnSeatsChange.InvokeAsync(i);
    }
    protected async Task ButtonStatus(string s)
    {
     
        await OnButtonStatusChange.InvokeAsync(s);
    }


}