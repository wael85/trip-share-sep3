@using Domain.Model
@using Domain.DTOs
@using HttpClient.ClientInterfaces
@using Radzen
@using System.Security.Claims
@using HttpClients.ClientInterface
@inject NavigationManager nvgM;
@inject INotificationClient _notificationClient;
@inject IAuthService auth;
@inject IUserClient _userClient;
@namespace TripShare.Pages.Components

<div class="card">
    <div class="row card-header">
        <h5 class="card-title col-10">Request Seat</h5>
        <button type="button" class="btn-close col-2 w-5" @onclick="@ModalCancel">&times;</button>
    </div>
    <div class="card-body">
        <p class="card-text"> From :@SelectedDetails.Pickup</p>
        <p class="card-text"> To : @SelectedDetails.Dropoff</p>
        <p class="card-text"> Num. Seats : @SelectedDetails.PassengerAmount</p>
        <p class="card-text">Driver : @SelectedTrip.Driver.FirstName @SelectedTrip.Driver.LastName</p>
        
            @foreach (var t in SelectedTrip.Stops)
            {
                if (t.City.Equals(SelectedDetails.Pickup))
                {
                    <p class="card-text">Meet time @t.ArrivalTime</p>
                }
            }
        <p class="card-text">Total Price : @((SelectedTrip.SubTripPrice(SelectedDetails.Pickup, SelectedDetails.Dropoff))* SelectedDetails.PassengerAmount)</p>

    </div>
    <button class="btn btn-primary col-2 m-3 w-25" @onclick="@SendRequest">Confirm</button>
</div>

@code {

    [Parameter]
    public TripSearchQuery SelectedDetails { get; set; } = new();
    [Parameter]
    public Trip SelectedTrip{ get; set; } = new();
    
    [Parameter]
    public EventCallback<bool> CloseModal { get; set; }

    string userEmail;
    UserInformationDto userInfoDto;

    private Task ModalCancel()
    {
        return CloseModal.InvokeAsync(false);
    }

    protected  override async void OnInitialized()
    {
        userEmail = auth.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals(ClaimTypes.Email)).Value;
        userInfoDto = await _userClient.GetByIdAsync(userEmail);
    }

    async void SendRequest()
    {
        try
        {
            NotificationDto dto = new NotificationDto
            {// todo replace sender
                Consumer = SelectedTrip.Driver.Email, 
                Sender = userEmail,
                SeatCount = SelectedDetails.PassengerAmount,
                Msg = "request-seat",
                Consumed = false,
                SeatPrice = SelectedTrip.SubTripPrice(SelectedDetails.Pickup,SelectedDetails.Dropoff),
                RequestedTripId =(int) SelectedTrip.Id,
                RequestedDropUpLocation =(int) SelectedTrip.Stops.Single(l => l.getLocationByCity(SelectedDetails.Dropoff)).Id,
                RequestedPickUpLocation = (int) SelectedTrip.Stops.Single(l => l.getLocationByCity(SelectedDetails.Pickup)).Id
            };
            await _notificationClient.SaveRequestAsync(dto);
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        await ModalCancel();
        nvgM.NavigateTo("/MyProfile");
    }

}