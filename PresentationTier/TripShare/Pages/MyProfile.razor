@page "/MyProfile"
@using Domain.Model
@using Radzen.Blazor;
@using Radzen
@using TripShare.Pages.Components
@using System.Collections.Immutable
@using System.Security.Claims
@using Domain.DTOs
@using HttpClient.ClientInterfaces
@using HttpClients.ClientInterface
@inject IUserClient _userClient;
@inject ITripClient _tripClient;
@inject ISeatTicketClient _SeatTicket;
@inject NotificationService _servic

@inject IAuthService auth
@attribute [Authorize]
@inject ICarClient _carClient;


        <RadzenNotification/>
        
        <div class="container">
            <div class="row " style="margin: 10px">
                <h3 class="col-md-9">My Profile</h3>
                @if (!string.IsNullOrEmpty(userInfoDto.DriveLicense))
                {
                    <p class="col-md-3">Driver</p>
                }

            </div>
            <hr style="margin: 5px"/>
            <div class="row ">
                <div class="col-md-6">
                    <!--User details -->
                    <div class="card" style="margin-top: 40px">
                        <div class="card-body">
                            <p >
                                <strong>EMAIL: </strong> @userInfoDto.Email
                            </p>
                            <p>
                                <strong>FULL NAME </strong>@userInfoDto.FirstName @userInfoDto.LastName
                            </p>
                            <p>
                                <strong>PHONE: </strong>@userInfoDto.Phone
                            </p>
                            <p>
                                <strong>ADDRESS: </strong>@userInfoDto.Address
                            </p>
                            @if (!string.IsNullOrEmpty(userInfoDto.DriveLicense))
                            {
                                <p>
                                    <strong>Driving License: </strong>@userInfoDto.DriveLicense
                                </p>
                                <p><strong>Car details: </strong> @userInfoDto.CarInfo?.CarModel, @userInfoDto.CarInfo?.Color, @userInfoDto.CarInfo?.FuelType, @userInfoDto.CarInfo?.SeatsCount seats, <br/> Plate Number:@userInfoDto.CarInfo?.PlateNumber</p>
                            }
                        </div>
                    </div>

                    <!--Tickets -->

                    <h5 style="margin-top: 10px">Tickets</h5>
                    @if (!myTickets.Any())
                    {
                        <p>There is no available tickets ..</p>
                    }
                    <div class="overflow-auto" style="height:300px; margin: 10px ">
                        <div class="row m-3">
                            @foreach (SeatTicket ticket in myTickets)
                            {
                                <div class="card col-3 ml-2 " style="width: 18rem;margin: 5px">
                                    <div class="card-body">
                                        <div class="row">
                                            <small class="card-text col-9">
                                                <strong>Price: </strong>@ticket.SeatPrice Kr
                                            </small> <br>
                                            @if (ticket.PickUpLocation.ArrivalTime <= DateTime.Now)
                                            {
                                                <small class="col-3" style="color: red">Done</small>
                                            }
                                            else
                                            {
                                                <small class="col-3" style="color: green">Active</small>
                                            }
                                        </div>
                                        <small class="card-text">
                                            <strong>Seats: </strong>@ticket.SeatAmount
                                        </small> <br>
                                        <small class="card-text">
                                            <strong>Meet time: </strong>@ticket.PickUpLocation.ArrivalTime
                                        </small> <br>
                                        <small class="card-text">
                                            <strong>From: </strong>@ticket.PickUpLocation.getAddress()
                                        </small> <br>
                                        <small class="card-text">
                                            <strong>Arrival: </strong>@ticket.DropLocation.ArrivalTime
                                        </small> <br>
                                        <small class="card-text">
                                            <strong>To: </strong>@ticket.DropLocation.getAddress()
                                        </small> <br>
                                        @if (ticket.PickUpLocation.ArrivalTime >= DateTime.Now)
                                        {
                                            <button style="width: 100px; margin: 5px" class="btn-danger" @onclick="(args) => { CancelTicketAsync(ticket.Id); myTickets.Remove(ticket);}">
                                                <small>Cancel</small>
                                            </button>
                                        }

                                    </div>
                                </div>
                            }
                        </div>
                    </div>


        <div class="col-md-6 ">
            <!--My trips or be a driver -->
            @if (string.IsNullOrEmpty(userInfoDto.DriveLicense))
            {
                <div class="container" style="margin: 10px">
                    <DriverBox
                        OnDriveLicenseChange="UpdateDriveLicense" OnColorChange="UpdateCarColor" OnModelChange="UpdateCarModel"
                        OnSeatsChange="UpdateSeats" OnCarTypeChange="UpdateFuelType" OnPlateNumberChange="UpdatePlateNumber" OnButtonStatusChange="ShowSubmitButton">
                    </DriverBox>
                </div>
                <button style="visibility: @showSubmitbutton" @onclick="UpdateDriver" class="btn border-primary">Submit</button>
            }
            else
            {
                <h5 style="margin: 5px">My Trips</h5>
                <div class="card overflow-auto" style="height:400px">
                    @if (!myTrips.Any())
                    {
                        <div class="container" style="margin: 10px">
                            <DriverBox
                                OnDriveLicenseChange="UpdateDriveLicense" OnColorChange="UpdateCarColor" OnModelChange="UpdateCarModel"
                                OnSeatsChange="UpdateSeats" OnCarTypeChange="UpdateFuelType" OnPlateNumberChange="UpdatePlateNumber">
                            </DriverBox>
                        </div>
                    }
                    else
                    {
                        <h5 style="margin: 5px">My Trips</h5>
                        <div class="card overflow-auto" style="height:400px">
                            @if (!myTrips.Any())
                            {
                                <p>There is no available trips ..</p>
                            }
                            @foreach (var tr in myTrips.ToImmutableList().Reverse())
                            {
                                <div class="card" style="margin: 10px">
                                    <div class="card-body">
                                        <div class="row">
                                            <small class="col-10 card-text text-muted">Trip Id: @tr.Id</small>
                                            @if (tr.Stops.First().ArrivalTime <= DateTime.Now)
                                            {
                                                <p class="col-2" style="color: red">Done</p>
                                            }
                                            else
                                            {
                                                <p class="col-2" style="color: green">Active</p>
                                            }
                                        </div>
                                        <hr/>
                                        @foreach (var s in tr.Stops)
                                        {
                                            <small class="card-text text-muted">@s.ArrivalTime</small>
                                            <p class="card-text">@s.getAddress()</p>
                                        }
                                    </div>

                                </div>
                            }
                        </div>
                        <!--todo seat request -->
                        <h5 style="margin: 10px">Seats request</h5>
                        <div class="overflow-auto" style="height:200px; margin: 10px ;">
                            <p style="margin: 5px">Travel id: 1, username: juan</p>
                        </div>
                    }

                </div>
            </div>
        </div>

@code {
    private string showSubmitbutton = "hidden";
    private UserInformationDto userInfoDto = new();
    private List<Trip> myTrips = new();
    private List<SeatTicket> myTickets = new();
    private string? DriveLicense = "";
    private string Color = "";
    private string SuccessMsg = "";
    private string plateNumber = "";
    private string CarColor = "";
    private string CarModel = "";
    private string FuelType = "";
    private int Seats = 0;
    private string userEmail;
        <!--todo -->
    //private List<RequestNotification> requestNotifications;
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userEmail = auth.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals(ClaimTypes.Email)).Value;
            userInfoDto = await _userClient.GetByIdAsync(userEmail);

    // IEnumerable<Trip> trips = await _tripClient.GetTripsByUserIdAsync(userEmail);
    // myTrips = trips.ToList();

            IEnumerable<SeatTicket> tickets = await _SeatTicket.GetTicketsByUserIdAsync(userEmail);
            myTickets = tickets.ToList();

    //todo Add user id after log in
    // IEnumerable<RequestNotification> notifications = _tripClient.GetNotifications(userEmail);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
        }
    }

    private async Task CancelTicketAsync(long id)
    {
        try
        {
            await _SeatTicket.CancelTicketAsync(id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
        }
    }
    private async Task UpdateDriver()
    {
        if (!String.IsNullOrEmpty(DriveLicense) & !String.IsNullOrEmpty(plateNumber))
        {
            try
            {
                string driverId = "wael@email.com";
                BeADriverRequestDto dto = new BeADriverRequestDto(driverId, DriveLicense!, plateNumber, Color, CarModel, Seats, FuelType);
                await _carClient.CreateAsync(dto);
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = $"You become a driver", Duration = 6000 });

            }
            catch (Exception e)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"All car fields is required !!  ", Duration = 6000 });

        }
        

        
    }

    public void UpdateDriveLicense(string s)
    {
        DriveLicense = s;
        ShowSubmitButton("");
    }

    public void UpdatePlateNumber(string s)
    {
        plateNumber = s;
        ShowSubmitButton("");
    }

    public void UpdateCarColor(string s)
    {
        CarColor = s;
    }

    public void UpdateFuelType(string s)
    {
        FuelType = s;
    }

    public void UpdateCarModel(string s)
    {
        CarModel = s;
    }

    public void UpdateSeats(int i)
    {
        Seats = i;
    }

    void ShowNotification(NotificationMessage message)
    {
        _servic.Notify(message);
    }

    void ShowSubmitButton(string? value)
    {
        if (!String.IsNullOrEmpty(value))
        {
            showSubmitbutton = value;
        }
        else
        {
            if (!String.IsNullOrEmpty(DriveLicense) & !String.IsNullOrEmpty(plateNumber))
            {
                showSubmitbutton =  "visible";
            }
            else
            {
                showSubmitbutton = "hidden";
            }
        }

    }
    

}