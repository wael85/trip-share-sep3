@page "/MyProfile"
@using Domain.Model
@using Radzen.Blazor;
@using Radzen
@using TripShare.Pages.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using System.Security.Claims
@using Components
@using Domain.DTOs
@using HttpClient.ClientInterfaces
@using HttpClients.ClientInterface
@inject IUserClient _userClient;
@inject ITripClient _tripClient;
@inject ISeatTicketClient _SeatTicket;
@inject NotificationService _servic;

@inject IAuthService auth;
@attribute [Authorize]
@inject ICarClient _carClient;
@inject INotificationClient _notificationClient;
@inject IRatingClient _ratingClient;

<RadzenNotification/>

<div class="container-fluid h-auto">
    <div class="row " style="margin: 10px">
        <h3 class="col-md-9">My Profile</h3>
        @if (!string.IsNullOrEmpty(userInfoDto.DriveLicense))
        {
            <p class="col-md-3">Driver</p>
        }

    </div>
    <hr style="margin: 5px"/>
    <div class="row ">
        <div class="col-md-6">
            <!--User details -->
            <div class="card" style="margin-top: 40px">
                <div class="card-body">
                    <p ><strong>EMAIL: </strong> @userInfoDto.Email</p>
                    <p><strong>FULL NAME </strong>@userInfoDto.FirstName @userInfoDto.LastName</p>
                    <p><strong>PHONE: </strong>@userInfoDto.Phone</p>
                    <p><strong>ADDRESS: </strong>@userInfoDto.Address</p>
                    <p><strong>RATING: </strong>@ratingMeanDto.Rating / 5 from @ratingMeanDto.Count rating(s)</p>
                    @if (!string.IsNullOrEmpty(userInfoDto.DriveLicense))
                    {
                        <p><strong>Driving License: </strong>@userInfoDto.DriveLicense</p>
                        <p><strong>Car details: </strong> @userInfoDto.CarInfo?.CarModel, @userInfoDto.CarInfo?.Color, @userInfoDto.CarInfo?.FuelType, @userInfoDto.CarInfo?.SeatsCount seats, <br/> Plate Number:@userInfoDto.CarInfo?.PlateNumber</p>
                    }
                </div>
            </div>

            <!--Tickets -->

            <h5 style="margin-top: 10px">Tickets</h5>
            @if (!myTickets.Any())
            {
                <p>There is no available tickets ..</p>
            }
            <div class="overflow-auto" style="height:300px; margin: 10px ">
                <div class="row m-3">
                    @foreach (SeatTicket ticket in myTickets)
                    {
                        <div class="card col-3 ml-2 " style="width: 18rem;margin: 5px">
                            <div class="card-body">
                                <div class="row">
                                    <small class="card-text col-9">
                                        <strong>Price:</strong>@(ticket.SeatPrice * ticket.SeatAmount) Kr
                                    </small> <br>
                                    @if (ticket.PickUpLocation.ArrivalTime <= DateTime.Now & ticket.PickUpLocation.ArrivalTime.AddHours(12) <= DateTime.Now)
                                    {
                                        <small class="col-3" style="color: red">Done</small>
                                    }
                                    else if(ticket.PickUpLocation.ArrivalTime >= DateTime.Now)
                                    {
                                        <small class="col-3" style="color: green">Active</small>
                                    }
                                </div>
                                <small class="card-text"><strong>Seats: </strong>@ticket.SeatAmount</small> <br>
                                <small class="card-text">
                                    <strong>Meet time: </strong>@ticket.PickUpLocation.ArrivalTime
                                </small> <br>
                                <small class="card-text">
                                    <strong>From: </strong>@ticket.PickUpLocation.getAddress()
                                </small> <br>
                                <small class="card-text">
                                    <strong>Arrival: </strong>@ticket.DropLocation.ArrivalTime
                                </small> <br>
                                <small class="card-text">
                                    <strong>To: </strong>@ticket.DropLocation.getAddress()
                                </small> <br>
                                @if (ticket.PickUpLocation.ArrivalTime >= DateTime.Now)
                                {
                                    <button style="width: 100px; margin: 5px" class="btn-danger" @onclick="@(async (args) => { await CancelTicketAsync(ticket.Id); myTickets.Remove(ticket);})">
                                        <small>Cancel</small>
                                    </button>
                                }
                                
                            </div>
                        </div>

                    }
                </div>
            </div>

        </div>
     <div class="col-6">
            <!--My trips or be a driver -->
            @if (string.IsNullOrEmpty(userInfoDto.DriveLicense))
            {
                <div class="container" style="margin: 10px">
                    <DriverBox
                        OnDriveLicenseChange="UpdateDriveLicense" OnColorChange="UpdateCarColor" OnModelChange="UpdateCarModel"
                        OnSeatsChange="UpdateSeats" OnCarTypeChange="UpdateFuelType" OnPlateNumberChange="UpdatePlateNumber" OnButtonStatusChange="ShowSubmitButton">
                    </DriverBox>
                </div>
                <button style="visibility: @showSubmitbutton" @onclick="UpdateDriver" class="btn border-primary">Submit</button>
            }else
            {
                <div class="container" style="height:400px">
                    <h5 class="m-3" style="margin: 5px">My Trips</h5>
                    @if (!myTrips.Any())
                    {
                        <p>There is no available trips ..</p>
                    }
                    @foreach (var tr in myTrips.ToImmutableList().Reverse())
                    {
                        <div class="card" style="margin: 10px">
                            <div class="card-body">
                                <div class="row">
                                    <small class="col-10 card-text text-muted">Trip Id: @tr.Id</small>
                                    @if (tr.Stops.Last().ArrivalTime <= DateTime.Now)
                                    {
                                        <p class="col-2" style="color: red">Done</p>
                                    }
                                    else
                                    {
                                        <p class="col-2" style="color: green">Active</p>
                                    }
                                </div>
                                <hr/>
                                @foreach (var s in tr.Stops)
                                {
                                    <small class="card-text text-muted">@s.ArrivalTime</small>
                                    <p class="card-text">@s.getAddress()</p>
                                }
                            </div>

                        </div>
                    }
                </div>
            }
            
</div>
</div>
</div>

<!--Notification section-->
<div class="container-fluid">
    <div class="row m-3">
        <button class="btn btn-info col-3" @onclick="GetUserNotifications">Get My Notification</button>
    </div>
    <div class="row">
        @if (!myNotifications.Any())
        {
            <p>There is no notification to show Please click the button to update.</p>
        }
        else
        {
            <div class="container-fluid justify-content-center flex-row">
                @foreach (var not in myNotifications)
                {

                    <div class="card m-5  border border-2 " style="display: inline-block; width: 250px; height: 300px; overflow: auto;">
                        <!--Card Head-->
                        @if (not.Msg.Equals("request-seat"))
                        {
                            <h5 class="card-header">
                                Request seat from @not.RequestedPickUpLocation.City to @not.RequestedDropUpLocation.City

                                notification: @not.Id
                            </h5>
                        }
                        else if (not.Msg.Equals("Rejected"))
                        {
                            <h5 class="card-header">
                                Rejection Trip number: @not.RequestedTripId
                            </h5>
                        }
                        else if (not.Msg.Equals("Accepted"))
                        {
                            <h5 class="card-header">
                                Welcome on Trip number: @not.RequestedTripId
                            </h5>

                        }
                        else
                        {
                            <h5 class="card-header">
                                Confirmation on Trip number: @not.RequestedTripId
                            </h5>
                        }
                        <!--Card body-->
                        <div class="card-body">
                            @if (not.Msg.Equals("request-seat"))
                            {
                                <h5 class="card-title">

                                    Requested by:<br/> @not.Sender
                                </h5>

                            }

                            else if (not.Msg.Equals("Rejected"))
                            {
                                <h5 class="card-title"> @not.Sender Rejected your request</h5>
                            }
                            else if (not.Msg.Equals("Accepted"))
                            {
                                <h5 class="card-title">@not.Sender Accepted your request</h5>
                            }
                            <!-- -->
                            @if (not.Msg.Equals("request-seat"))
                            {
                                <p class="card-text">Seats count: @not.SeatCount ,<br/> Total price: @(not.SeatCount * not.SeatPrice)</p>

                            }
                            else if (not.Msg.Equals("Rejected"))
                            {
                                <p class="card-text">Please go to search trip and find another.</p>

                            }
                            else if (not.Msg.Equals("Accepted"))
                            {
                                <p class="card-text">Please Finish the proccess and pay for:
                                    <br/>Seats count: @not.SeatCount ,
                                    <br/> Total price: @(not.SeatCount * not.SeatPrice)</p>

                            }
                            else
                            {
                                <p class="card-text">Please Confirm if you completed this trip: @not.RequestedTripId </p>
                            }
                            <!--Button group-->
                            @if (not.Msg.Equals("request-seat"))
                            {
                                <button class="btn btn-secondary " @onclick="@((e) => { SendReplay(not, false);ConsumeNotification(not);GetUserNotifications(); })">Reject</button>

                                <button class="btn btn-primary" @onclick="@((e) => { SendReplay(not, true);ConsumeNotification(not); GetUserNotifications();})">Accept</button>

                            }
                            else if (not.Msg.Equals("Rejected"))
                            {

                                <button class="btn btn-danger" @onclick="@(((e) => { ConsumeNotification(not); GetUserNotifications();}))">Delete</button>
                            }
                            else if (not.Msg.Equals("Accepted"))
                            {
                                <button class="btn btn-secondary " @onclick="@((e) => { SendReplay(not, false); ConsumeNotification(not); GetUserNotifications();})">Cancel</button>

                                <button class="btn btn-primary" @onclick="@(() => { ProcessToPayment(not); ConsumeNotification(not); GetUserNotifications();})">Proccess to Payment</button>
                            }
                            else
                            {
                                <button @onclick="@(() => { ConsumeNotification(not); GetUserNotifications();})">Confirme</button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<Modal ShowModal="modal">
    <div class="container">
        <h3>Book Place on Trip: @selectedNotification.RequestedTripId</h3>
        <h5>Seats Count: @selectedNotification.SeatCount</h5>
        <h5>Total to pay: @(selectedNotification.SeatCount * selectedNotification.SeatPrice) </h5>
        <button class="btn-secondary" @onclick="@((e)=> { modal = false; })">Cancel</button>
        <button class="btn-primary" @onclick="@((e) => { BookSeatTicket();ConsumeNotification(selectedNotification);GetUserNotifications(); })">Pay and Book</button>
    
    </div>
</Modal>

@code {
    private string showSubmitbutton = "hidden";
    private UserInformationDto userInfoDto = new();
    private RatingMeanDTO ratingMeanDto = new(0, 0);
    private List<Trip> myTrips = new();
    private List<SeatTicket> myTickets = new();
    private string? DriveLicense = "";
    private string Color = "";
    private string SuccessMsg = "";
    private string plateNumber = "";
    private string CarColor = "";
    private string CarModel = "";
    private string FuelType = "";
    private int Seats = 0;
    private List<Notification> myNotifications = new List<Notification>();
    private bool modal = false;
    private Notification selectedNotification;


    private string userEmail;

    async void GetMyTicket()
    {
        IEnumerable<SeatTicket> tickets = await _SeatTicket.GetTicketsByUserIdAsync(userEmail);
        myTickets = tickets.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userEmail = auth.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals(ClaimTypes.Email)).Value;
            userInfoDto = await _userClient.GetByIdAsync(userEmail);
            ratingMeanDto = await _ratingClient.GetRatingMeanBySubject(userEmail);


            IEnumerable<Trip> trips = await _tripClient.GetTripsByUserIdAsync(userEmail);
            myTrips = trips.ToList();
            foreach (var myTrip in myTrips)
            {
                if (myTrip.Stops.Last().ArrivalTime.AddHours(12) > DateTime.Now )
                {
                    CreateEndTripNotification(myTrip);
                }
               
            }
            GetMyTicket();
           
            StateHasChanged();
            
            GetUserNotifications();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
        }
    }

    private async Task CancelTicketAsync(long id)
    {
    try
        {
            await _SeatTicket.CancelTicketAsync(id);
            GetMyTicket();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
        }
    }
    

    private async Task UpdateDriver()
    {
        if (!String.IsNullOrEmpty(DriveLicense) & !String.IsNullOrEmpty(plateNumber))
        {
            try
            {
                BeADriverRequestDto dto = new BeADriverRequestDto(userEmail, DriveLicense!, plateNumber, Color, CarModel, Seats, FuelType);
                await _carClient.CreateAsync(dto);
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = $"You become a driver", Duration = 6000 });
            }
            catch (Exception e)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"All car fields is required !!  ", Duration = 6000 });
        }
    }

    public void UpdateDriveLicense(string s)
    {
        DriveLicense = s;
        ShowSubmitButton("");
    }

    public void UpdatePlateNumber(string s)
    {
        plateNumber = s;
        ShowSubmitButton("");
    }

    public void UpdateCarColor(string s)
    {
        CarColor = s;
    }

    public void UpdateFuelType(string s)
    {
        FuelType = s;
    }

    public void UpdateCarModel(string s)
    {
        CarModel = s;
    }

    public void UpdateSeats(int i)
    {
        Seats = i;
    }

    void ShowNotification(NotificationMessage message)
    {
        _servic.Notify(message);
    }

    void ShowSubmitButton(string? value)
    {
        if (!String.IsNullOrEmpty(value))
        {
            showSubmitbutton = value;
        }
        else
        {
            if (!String.IsNullOrEmpty(DriveLicense) & !String.IsNullOrEmpty(plateNumber))
            {
                showSubmitbutton = "visible";
            }
            else
            {
                showSubmitbutton = "hidden";
            }
        }
    }


   async void GetUserNotifications()
    {
        try
        {
           IEnumerable<Notification> myNots =await _notificationClient.GetUserNotification(userEmail);
           myNotifications = myNots.ToList();
            StateHasChanged();

        }
        catch (Exception e)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"An Error happen will getting your notifications !!  ", Duration = 6000 });
        }
    }

    void ConsumeNotification(Notification n)
    {
        NotificationDto updatNotificationDto= new NotificationDto()
        {
            Id = n.Id,
            Consumer = n.Consumer,
            Sender = n.Sender,
            SeatPrice = n.SeatPrice,
            SeatCount = n.SeatCount,
            Consumed = true,
            RequestedTripId = n.RequestedTripId,
            RequestedDropUpLocation =(int) n.RequestedDropUpLocation.Id,
            RequestedPickUpLocation = (int)n.RequestedPickUpLocation.Id,
            Msg = "Deleted"

        };
         _notificationClient.SaveRequestAsync(updatNotificationDto);
        GetUserNotifications();

    }
    async void SendReplay(Notification n, bool replayStatus)
    {
        if (replayStatus & !n.Consumed)
        {
            NotificationDto replay = new NotificationDto()
            {
                Consumer = n.Sender,
                Sender = n.Consumer,
                SeatPrice = n.SeatPrice,
                SeatCount = n.SeatCount,
                Consumed = false,
                RequestedTripId = n.RequestedTripId,
                RequestedDropUpLocation = (int)n.RequestedDropUpLocation.Id,
                RequestedPickUpLocation = (int)n.RequestedPickUpLocation.Id,
                Msg = "Accepted"
            };
            
            try
            {
                await _notificationClient.SaveRequestAsync(replay);
                ConsumeNotification(n);
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Replay is sent... ", Duration = 6000 });
            }
            catch (Exception e)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"can not send replay try again later !!  ", Duration = 6000 });
            }
        }
        else
        {
            if (!n.Consumed)
            {
                NotificationDto replay = new NotificationDto()
                {
                    Consumer = n.Sender,
                    Sender = n.Consumer,
                    SeatPrice = n.SeatPrice,
                    SeatCount = n.SeatCount,
                    Consumed = false,
                    RequestedTripId = n.RequestedTripId,
                    RequestedDropUpLocation =(int) n.RequestedDropUpLocation.Id,
                    RequestedPickUpLocation = (int)n.RequestedPickUpLocation.Id,
                    Msg = "Rejected"

                };

                try
                {
                
                    await _notificationClient.SaveRequestAsync(replay);
                    ConsumeNotification(n);
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Replay is sent... ", Duration = 6000 });

                }
                catch (Exception e)
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"can not send replay try again later !!  ", Duration = 6000 });

                }
            }
           
        }
        GetUserNotifications();

    }
    

    void ProcessToPayment(Notification n)
    {
        if (!n.Consumed)
        {
            selectedNotification = n;
            modal = true;
        }

    }

   async void BookSeatTicket()
    {
         if (!selectedNotification.Consumed & !String.IsNullOrEmpty(selectedNotification.Consumer)
             & !String.IsNullOrEmpty(selectedNotification.Sender) &
             !String.IsNullOrEmpty(selectedNotification.RequestedDropUpLocation.City)
             & !String.IsNullOrEmpty(selectedNotification.RequestedPickUpLocation.City)
         )
         {
             try
             {
                 CreateSeatTicketDto dto = new CreateSeatTicketDto
                 {
                     PassengerId = selectedNotification.Consumer,
                     SeatAmount = selectedNotification.SeatCount,
                     SeatPrice = selectedNotification.SeatPrice,
                     TripId = selectedNotification.RequestedTripId,
                     DropLocationId = selectedNotification.RequestedDropUpLocation.Id,
                     PickUpLocationId = selectedNotification.RequestedPickUpLocation.Id
                 };
                 var s = await _SeatTicket.ReserveTicketAsync(dto);
                 GetMyTicket();
                 ConsumeNotification(selectedNotification);
                 ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = $"Booking ${s.Id} success... ", Duration = 6000 });
             }
             catch (Exception e)
             {
                 ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"can not make this booking try again later !!  ", Duration = 6000 });

             }
         }
         else
         {
             ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"can not make this booking try again later !!  ", Duration = 6000 });

         }
        GetUserNotifications();
       modal = false;
    }

    async void CreateEndTripNotification(Trip trip)
    {
        NotificationDto replay = new NotificationDto()
        {
            Consumer = userEmail,
            Sender = "system@trip-share.com",
            Consumed = false,
            RequestedTripId =(int)trip.Id,
            Msg = "Trip-Done",
            SeatCount = 0,
            RequestedDropUpLocation = (int)trip.Stops.First().Id,
            RequestedPickUpLocation =  (int)trip.Stops.Last().Id,
            SeatPrice = 0

        };
        try
        {
            await _notificationClient.SaveRequestAsync(replay);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    } 
}