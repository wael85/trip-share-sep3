@page "/CreateTrip"


@using Radzen.Blazor;
@using Domain.Model
@using Radzen
@using Domain.DTOs
@using HttpClient.ClientInterfaces
@using HttpClients.ClientInterface
@using System.Security.Claims
@inject NotificationService _servic
@inject ITripClient _client;
@inject NavigationManager navG;
@inject IAuthService auth
@attribute [Authorize]

<AuthorizeView Policy="DriveLicense">
    <Authorized>
<h2 class="mb-3" style="color: #1a1e21">Create a new Trip: </h2>
<RadzenNotification/>

<form class="container-fluid" autocomplete="on" target="_self">
    <!---------------------------------Start Point------------------------------>
    <div class="row border border-light border-2 container mt-5">
        <h3>Start City: </h3>
        <div class="col-md-2">
            <label for="validationDefault01" class="form-label">Street Name</label>
            <input type="text" @bind="startStreetName" class="form-control" id="validationDefault01" required>
        </div>
        <div class="col-md-2">
            <label for="validationDefault02" class="form-label">Street number</label>
            <input type="text" @bind="startStreetNumber" class="form-control" id="validationDefault02" required>
        </div>
        <div class="col-md-1">
            <label for="validationDefault03" class="form-label">Zip</label>
            <input type="text" @bind="startZipCode" class="form-control" id="validationDefault03" required>
        </div>
        <div class="col-md-2">
            <label for="validationDefault04" class="form-label">City</label>
            <input type="text" @bind="startCityName" class="form-control" id="validationDefault04" required>
        </div>
        <div class="col-md-4 align-middle">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Trip Start:</RadzenText>
                <RadzenDatePicker Min="DateTime.Today.AddDays(0)" @bind-Value=@startDateTime ShowTime="true" Change=@(args => OnChangeStartDate(args.Value))
                                  HourFormat="24" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
            </RadzenCard>
        </div>
    </div>
    <!---------------------------------End Point------------------------------>

    <div class="row border border-light border-2 container mt-5">
        <h3>Destination City: </h3>
        <div class="col-md-2">
            <label for="validationDefault05" class="form-label">Street Name</label>
            <input type="text"  @bind="endStreetName" class="form-control" id="validationDefault05" required>
        </div>
        <div class="col-md-2">
            <label for="validationDefault06" class="form-label">Street number</label>
            <input type="text" @bind="endStreetNumber" class="form-control" id="validationDefault06" required>
        </div>
        <div class="col-md-1">
            <label for="validationDefault07" class="form-label">Zip</label>
            <input type="text" @bind="endZipCode" class="form-control" id="validationDefault07" required>
        </div>
        <div class="col-md-2">
            <label for="validationDefault08" class="form-label">City</label>
            <input type="text" @bind="endCityName" class="form-control" id="validationDefault08" required>
        </div>
        <div class="col-md-4 align-middle">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Arriving on:</RadzenText>
                <RadzenDatePicker r Min="DateTime.Today.AddDays(0)" @bind-Value=@endDateTime ShowTime="true" Change=@(args => OnChangeEndDate(args.Value))
                                  HourFormat="24" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
            </RadzenCard>
        </div>
    </div>
    <!---------------------------------price and seats ------------------------------>

    <div class="row">
        <div class="col-3">
            <label for="validationDefault09" class="form-label">Full price</label>
            <input type="number" pattern="^\d*(\.\d{0,2})?$" class="form-control" id="validationDefault09" @bind="fullPrice" required>
        </div>
        <div class="col-md-3">
            <label for="validationDefault10" class="form-label">Avilable Seats:</label>
            <input type="number" max="4" min="1" class="form-control" id="validationDefault10" @bind="availableSeats" required>
        </div>

    </div>
    <!---------------------------------Stops Point------------------------------>

    <form autocomplete="on" target="_self">
        <div class="row border border-light border-2 container mt-5">
            <h3>Add Stop Location: </h3>
            <div class="col-md-2">
                <label for="validationDefault11" class="form-label">Street Name</label>
                <input type="text" @bind="stopStreetName " class="form-control" id="validationDefault11" required>
            </div>
            <div class="col-md-2">
                <label for="validationDefault12" class="form-label">Street number</label>
                <input type="text" class="form-control" @bind="stopStreetNumber" id="validationDefault12" required>
            </div>
            <div class="col-md-1">
                <label for="validationDefault13" class="form-label">Zip</label>
                <input type="text" @bind="stopZipCode" class="form-control" id="validationDefault13" required>
            </div>
            <div class="col-md-2">
                <label for="validationDefault14" class="form-label">City</label>
                <input type="text" class="form-control" @bind="stopCityName" id="validationDefault14" required>
            </div>
            <div class="col-md-4 align-middle">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Arrive to location:</RadzenText>
                    <RadzenDatePicker Min="DateTime.Today.AddDays(0)" @bind-Value=@stopDateTime ShowTime="true" Change=@(args => OnChangeStopDate(args.Value))
                                      HourFormat="24" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
                </RadzenCard>
            </div>
        </div>
        <button type="button" class="btn-outline-secondary m-4" @onclick="AddLocation">Add Location</button>
    </form>

    <div class="container-fluid ">
        <div class="row m-3">
            @foreach (Location l in stops)
            {
                <div class="card col-3 ml-2" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">@l.getAddress()</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@l.ArrivalTime</h6>
                        <button class="btn-danger" @onclick="(args) => { DeleteLocation(l); }">Remove Stop</button>
                    </div>
                </div>
            }
        </div>

    </div>

    <!--   <div class="col-md-3">
        <label for="validationDefault04" class="form-label">State</label>
        <select class="form-select" id="validationDefault04" required>
            <option selected disabled value="">Choose...</option>
            <option>...</option>
        </select>
    </div> -->

    <div class="col-12 mt-5">
        <button type="button" class="btn btn-primary" @onclick="CreateTripAsync">Create Trip</button>
    </div>
</form>

  </Authorized>
    <NotAuthorized>
        <h4>Update your profile to driver and create a trip.<a href="MyProfile" class="link-info"> here</a></h4>
    </NotAuthorized>
</AuthorizeView>


@code {
    DateTime? startDateTime;
    string startStreetName;
    string startStreetNumber;
    string startCityName;
    string startZipCode;
    
    DateTime? endDateTime;
    string endStreetName;
    string endStreetNumber;
    string endCityName;
    string endZipCode;
    
    DateTime? stopDateTime;
    string stopStreetName;
    string stopStreetNumber;
    string stopCityName;
    string stopZipCode;

    double fullPrice= 0;
    int availableSeats = 1;
    List<Location> stops = new List<Location>();


    void OnChangeStartDate(DateTime? value)
    {
        startDateTime = value;
        Console.WriteLine("start date : "+startDateTime);
    }
    void OnChangeEndDate(DateTime? value)
  {
        if (value < startDateTime)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "End time can not be before start", Duration = 4000 });
            endDateTime = null;
            
        }
        else
        {
            endDateTime = value;
            Console.WriteLine("end date : "+endDateTime);
 

        }
  } void OnChangeStopDate(DateTime? value)
  {
      if (value < startDateTime || value > endDateTime)
      {
          ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Stop time is not valid", Duration = 6000 });
          stopDateTime = null;
      }
      else
      {
          stopDateTime = value;
          Console.WriteLine("stop date : "+stopDateTime);


      }
  }


    private void DeleteLocation(Location lo)
    {
        stops.Remove(lo);
    }

    private void AddLocation()
    {
        if (stopDateTime  == null 
            || String.IsNullOrEmpty(stopCityName) 
            || String.IsNullOrEmpty(stopStreetName)
            || String.IsNullOrEmpty(stopStreetNumber)
            || String.IsNullOrEmpty(stopZipCode))
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "All Stop's fields should be set ", Duration = 6000 });
        }
        else
        {
            Location l = new Location()
            {
                ArrivalTime = stopDateTime.Value,
                City = stopCityName,
                StreetName = stopStreetName,
                StreetNumber = stopStreetNumber,
                PostCode = stopZipCode
                
            };
            stops.Add(l);
            stopDateTime = null;
            stopStreetName = "";
            stopStreetNumber = "";
            stopCityName = "";
            stopZipCode = "";

        }
    }
    void ShowNotification(NotificationMessage message)
    {
        
        _servic.Notify(message);
    }

    private async void CreateTripAsync()
    {
        Location end = new Location() { ArrivalTime = endDateTime!.Value, City = endCityName, StreetName = endStreetName, PostCode = endZipCode, StreetNumber = endStreetNumber };
        Location start = new Location() { ArrivalTime = startDateTime!.Value, City = startCityName, StreetName = startStreetName, PostCode = startZipCode, StreetNumber = startStreetNumber };
        
        if (startDateTime == null || endDateTime == null ||
            String.IsNullOrEmpty(startCityName) 
            || String.IsNullOrEmpty(startStreetName)
            || String.IsNullOrEmpty(startStreetNumber)
            || String.IsNullOrEmpty(startZipCode)
            || String.IsNullOrEmpty(endCityName) 
            || String.IsNullOrEmpty(endStreetName)
            || String.IsNullOrEmpty(endStreetNumber)
            || String.IsNullOrEmpty(endZipCode)
        )
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"All Trip field need to be set... ", Duration = 7000 });

        }
        else
        {
    //TODO: add login user

            
            try
            {
              
                stops.Add(end);
                stops.Insert(0,start);
                TripCreationDto dto = new TripCreationDto();
                dto.DriverId =  auth.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals(ClaimTypes.Email)).Value;
                dto.Stops = stops;
                dto.FullPrice = fullPrice;
                dto.AvailableSeats = availableSeats;
                
                var trip = await _client.CreateTripAsync(dto);
                Console.WriteLine(trip.Id);
               
               startDateTime = null;
               startStreetName = "";
               startStreetNumber = "";
               startCityName = "";
               startZipCode = "";
                
               endDateTime = null;
               endStreetName = "";
               endStreetNumber = "";
               endCityName = "";
               endZipCode = "";
    
                stopDateTime = null;
                stopStreetName = "";
                stopStreetNumber = "";
                stopCityName = "";
                stopZipCode = "";

                 fullPrice = 0;
                availableSeats = 1;
                stops.RemoveRange(0,stops.Count);
                ShowNotification(new NotificationMessage { Style = "position: absolute; left: -1000px;",
                    Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 60000 });
                navG.NavigateTo("/");

            }
            catch (Exception e)
            {
                stops.Remove(start!);
                stops.Remove(end!);
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = " Something went wrong..", Duration = 6000 });
                Console.WriteLine(e.Message);

            }
        }
       
    }

}
