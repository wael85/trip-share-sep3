@page "/CreateTrip"


@using Radzen.Blazor;
@using Domain.Model
@using HttpClient.ClientImplementation
@using Radzen
@inject NotificationService _servic
@inject ITripClient _client;


<h2 class="mb-3" style="color: #1a1e21">Create a new Trip: </h2>
<RadzenNotification/>
<form class="container-fluid" action="/TripsSearch">
     <!---------------------------------Start Point------------------------------> 
     <div class="row border border-light border-2 container mt-5">
         <h3>Start City: </h3>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">Street Name</label>
             <input type="text" @bind="startStreetName" class="form-control" id="validationDefault11" required>
         </div>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">Street number</label>
             <input type="text" @bind="startStreetNumber" class="form-control" id="validationDefault12" required>
         </div>
         <div class="col-md-1">
             <label for="validationDefault05" class="form-label">Zip</label>
             <input type="text" @bind="startZipCode" class="form-control" id="validationDefault13" required>
         </div>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">City</label>
             <input type="text" @bind="startCityName" class="form-control" id="validationDefault14" required>
         </div>
         <div class="col-md-4 align-middle">
             <RadzenCard>
                 <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Trip Start:</RadzenText>
                 <RadzenDatePicker  Min="DateTime.Today.AddDays(0)" @bind-Value=@startDateTime ShowTime="true" Change=@(args => OnChangeStartDate(args.Value))
                                    HourFormat="12" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
             </RadzenCard>
         </div>
     </div>
          <!---------------------------------End Point------------------------------> 

     <div class="row border border-light border-2 container mt-5">
         <h3>Destination City: </h3>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">Street Name</label>
             <input type="text" @bind="endStreetName" class="form-control" id="validationDefault01" required>
         </div>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">Street number</label>
             <input type="text" @endStreetNumber class="form-control" id="validationDefault02" required>
         </div>
         <div class="col-md-1">
             <label for="validationDefault05" class="form-label">Zip</label>
             <input type="text" @bind="endZipCode" class="form-control" id="validationDefault03" required>
         </div>
         <div class="col-md-2">
             <label for="validationDefault03" class="form-label">City</label>
             <input type="text" @bind="endCityName" class="form-control" id="validationDefault04" required>
         </div>
         <div class="col-md-4 align-middle">
             <RadzenCard>
                 <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Arriving on:</RadzenText>
                 <RadzenDatePicker r Min="DateTime.Today.AddDays(0)" @bind-Value=@endDateTime ShowTime="true" Change=@(args => OnChangeEndDate(args.Value))
                                   HourFormat="12" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
             </RadzenCard>
         </div>
     </div>
          <!---------------------------------price and seats ------------------------------> 

     <div class="row">
         <div class="col-3">
             <label for="validationDefault01" class="form-label">Full price</label>
             <input type="number" pattern="^\d*(\.\d{0,2})?$" class="form-control" id="validationDefault05" @bind="fullPrice" required>
         </div>
         <div class="col-md-3">
             <label for="validationDefault02" class="form-label">Avilable Seats:</label>
             <input type="number" max="4" min="1" class="form-control" id="validationDefault06" @bind="availableSeats" required>
         </div>
       
     </div>
          <!---------------------------------Stops Point------------------------------> 

    <form autocomplete="on" target="_self">
        <div class="row border border-light border-2 container mt-5">
            <h3>Add Stop Location: </h3>
            <div class="col-md-2">
                <label for="validationDefault03" class="form-label">Street Name</label>
                <input type="text" @bind="stopStreetName " class="form-control" id="validationDefault07" required>
            </div>
            <div class="col-md-2">
                <label for="validationDefault03" class="form-label">Street number</label>
                <input type="text" class="form-control" @bind="stopStreetNumber" id="validationDefault08" required>
            </div>
            <div class="col-md-1">
                <label for="validationDefault05" class="form-label">Zip</label>
                <input type="text" @bind="stopZipCode" class="form-control" id="validationDefault09" required>
            </div>
            <div class="col-md-2">
                <label for="validationDefault03" class="form-label">City</label>
                <input type="text" class="form-control" @bind="stopCityName" id="validationDefault10" required>
            </div>
            <div class="col-md-4 align-middle">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Arrive to location:</RadzenText>
                    <RadzenDatePicker  Min="DateTime.Today.AddDays(0)" @bind-Value=@stopDateTime ShowTime="true" Change=@(args => OnChangeStopDate(args.Value))
                                      HourFormat="12" DateFormat="yyyy/MM/dd h:mm tt" Class="w-100"/>
                </RadzenCard>
            </div>
        </div>
        <button type="button" class="btn-outline-secondary m-4" @onclick="AddLocation">Add Location</button>
    </form>
     
     <div class="container-fluid ">
         <div class="row m-3">
         @foreach (Location l in stops)
         {
                 <div class="card col-3 ml-2" style="width: 18rem;">
                     <div class="card-body">
                         <h5 class="card-title">@l.getAddress()</h5>
                         <h6 class="card-subtitle mb-2 text-muted">@l.ArrivalTime</h6>
                         <button class="btn-danger" @onclick="(args) => { DeleteLocation(l); }">Remove Stop</button>
                     </div>
                 </div>
         }
         </div>

     </div>
     
 <!--   <div class="col-md-3">
        <label for="validationDefault04" class="form-label">State</label>
        <select class="form-select" id="validationDefault04" required>
            <option selected disabled value="">Choose...</option>
            <option>...</option>
        </select>
    </div> -->

    <div class="col-12 mt-5">
        <button type="button" class="btn btn-primary" @onclick="CreateTripAsync" >Create Trip</button>
    </div>

</form>



@code {
    DateTime? startDateTime;
    string startStreetName;
    string startStreetNumber;
    string startCityName;
    string startZipCode;
    
    DateTime? endDateTime;
    string endStreetName;
    string endStreetNumber;
    string endCityName;
    string endZipCode;
    
    DateTime? stopDateTime;
    string stopStreetName;
    string stopStreetNumber;
    string stopCityName;
    string stopZipCode;

    double fullPrice;
    int availableSeats;
    List<Location> stops = new List<Location>();


    void OnChangeStartDate(DateTime? value)
    {
        startDateTime = value;
    }
    void OnChangeEndDate(DateTime? value)
  {
        if (value <= startDateTime)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "End time can not be before start", Duration = 4000 });
            endDateTime = null;
            return;
        }
        endDateTime = value;
  } void OnChangeStopDate(DateTime? value)
  {
      if (stopDateTime < startDateTime || stopDateTime >= endDateTime)
      {
          ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Stop time is not valid", Duration = 6000 });
          stopDateTime = null;
      }
      stopDateTime = value;
  }


    private void DeleteLocation(Location lo)
    {
        stops.Remove(lo);
    }

    private void AddLocation()
    {
        if (stopDateTime  == null 
            || String.IsNullOrEmpty(stopCityName) 
            || String.IsNullOrEmpty(stopStreetName)
            || String.IsNullOrEmpty(stopStreetNumber)
            || String.IsNullOrEmpty(stopZipCode))
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "All Stop's fields should be set ", Duration = 6000 });
        }
        else
        {
            Location l = new Location()
            {
                ArrivalTime = stopDateTime.Value,
                City = stopCityName,
                StreetName = stopStreetName,
                StreetNumber = stopStreetNumber,
                PostCode = stopZipCode
                
            };
            stops.Add(l);
            stopDateTime = null;
            stopStreetName = null;
            stopStreetNumber = null;
            stopCityName = null;
            stopZipCode = null;

        }
    }
    void ShowNotification(NotificationMessage message)
    {
        
        _servic.Notify(message);
    }

    private async void CreateTripAsync()
    {
        if (startDateTime == null || endDateTime == null)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"Trips Dates need to be set... ", Duration = 6000 });

        }
        else
        {
            Trip t = new Trip();
        
            //TODO: add login user
            t.Driver = new User("a", "w", "v", "v", "d", "d", "d");
            t.Passengers = new List<User>();
            t.Stops = stops;
            t.Tickets = new List<SeatTicket>();
            t.FullPrice = fullPrice;
            t.AvailableSeats = availableSeats;
            try
            {
               // var trip = await _client.CreateTripAsync(t);
                ShowNotification(new NotificationMessage { Style = "position: absolute; left: -1000px;",
                    Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 60000 });
               startDateTime = null;
               startStreetName = null;
               startStreetNumber = null;
               startCityName = null;
               startZipCode = null;
    
               endDateTime = null;
               endStreetName = null;
               endStreetNumber = null;
               endCityName = null;
               endZipCode = null;
    
               stopDateTime = null;
               stopStreetName = null;
               stopStreetNumber = null;
               stopCityName = null;
               stopZipCode = null;

                 fullPrice = 0;
                availableSeats = 0;

            }
            catch (Exception e)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = $"{e.Message} ", Duration = 6000 });

            }
        }
       
    }

}
